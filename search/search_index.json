{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 iumiCash uses REST API for integration and data exchange with third-party systems such as those used by service providers, vendors and merchants. The API uses standard verbs and returns HTTP response codes and JSON-encoded responses. To get started with iumiCash REST API, please contact a iumiCash representative to get registered first and follow the process described in Introduction to vendors section. Administrators of the third-party systems are required to provide the details of their systems to get whitelisted by iumiCash for API integration to function properly.","title":"Getting started"},{"location":"#introduction","text":"iumiCash uses REST API for integration and data exchange with third-party systems such as those used by service providers, vendors and merchants. The API uses standard verbs and returns HTTP response codes and JSON-encoded responses. To get started with iumiCash REST API, please contact a iumiCash representative to get registered first and follow the process described in Introduction to vendors section. Administrators of the third-party systems are required to provide the details of their systems to get whitelisted by iumiCash for API integration to function properly.","title":"Introduction"},{"location":"idempotency/","text":"Idempotency \u00b6 You can make idempotent calls any number of times without concern that the server creates or completes an action on a resource more than once. You can retry idempotent calls that fail with network timeouts or HTTP 5xx status codes for as long as the server stores the ID. Idempotency enables you to correlate request payloads with response payloads, eliminate duplicate requests, and retry failed requests or requests with unclear responses. Success To enforce idempotency on REST API POST calls, use the RequestId request header, which contains a unique user-generated ID that the server stores for a period of time. Warning For example, when you include a previously specified RequestId header in a request, iumiCash returns the latest status of the previous request that used that same header. Conversely, when you omit the RequestId header from a request, iumiCash duplicates the request. Examples Request Response An example request using cURL. Tip RequestId idempotency key is used in this example. curl -v -X POST https://api.iumi.cash/api/v1/orders/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" \\ -H \"RequestId: 7b92603e-77ed-4896-8e78-5dea2050476a\" \\ -d ' \\ { \"external_id\": \"123456\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ] } ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"client_id\" : \"example_client_id\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] }","title":"Idempotency"},{"location":"idempotency/#idempotency","text":"You can make idempotent calls any number of times without concern that the server creates or completes an action on a resource more than once. You can retry idempotent calls that fail with network timeouts or HTTP 5xx status codes for as long as the server stores the ID. Idempotency enables you to correlate request payloads with response payloads, eliminate duplicate requests, and retry failed requests or requests with unclear responses. Success To enforce idempotency on REST API POST calls, use the RequestId request header, which contains a unique user-generated ID that the server stores for a period of time. Warning For example, when you include a previously specified RequestId header in a request, iumiCash returns the latest status of the previous request that used that same header. Conversely, when you omit the RequestId header from a request, iumiCash duplicates the request. Examples Request Response An example request using cURL. Tip RequestId idempotency key is used in this example. curl -v -X POST https://api.iumi.cash/api/v1/orders/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" \\ -H \"RequestId: 7b92603e-77ed-4896-8e78-5dea2050476a\" \\ -d ' \\ { \"external_id\": \"123456\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ] } ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"client_id\" : \"example_client_id\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] }","title":"Idempotency"},{"location":"requests/","text":"Requests \u00b6 API requests \u00b6 In order to retrieve, submit, update or delete data, a REST API request is created. A typical REST API request includes HTTP methods ( GET , POST , PUT , PATCH , DELETE ), the URL to the API service and the URI with query parameters. A REST API request may include one or more HTTP request headers. Optionally, GET calls may include query parameters to filter, limit the size of, and sort the data in the responses. GET calls do not include JSON request body. Most POST , PUT , and PATCH calls require a JSON request body. URL \u00b6 iumiCash offers multiple URL's to its API services, which are provided by iumiCash together with credentials: Sandbox URL: used for testing purposes only and does not affect production data. Production URL: used for real data operations. HTTP request headers \u00b6 Authorization string The identifier (such as a bearer token) is required to validate a third-party system to access a resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token . Content-Type string The media type is required for operations with a request body. The value is application/<format> , where format is json . RequestId string The idempotency key is used to correlate request payloads with response payloads. See idempotency for more information.","title":"Requests"},{"location":"requests/#requests","text":"","title":"Requests"},{"location":"requests/#api-requests","text":"In order to retrieve, submit, update or delete data, a REST API request is created. A typical REST API request includes HTTP methods ( GET , POST , PUT , PATCH , DELETE ), the URL to the API service and the URI with query parameters. A REST API request may include one or more HTTP request headers. Optionally, GET calls may include query parameters to filter, limit the size of, and sort the data in the responses. GET calls do not include JSON request body. Most POST , PUT , and PATCH calls require a JSON request body.","title":"API requests"},{"location":"requests/#url","text":"iumiCash offers multiple URL's to its API services, which are provided by iumiCash together with credentials: Sandbox URL: used for testing purposes only and does not affect production data. Production URL: used for real data operations.","title":"URL"},{"location":"requests/#http-request-headers","text":"Authorization string The identifier (such as a bearer token) is required to validate a third-party system to access a resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token . Content-Type string The media type is required for operations with a request body. The value is application/<format> , where format is json . RequestId string The idempotency key is used to correlate request payloads with response payloads. See idempotency for more information.","title":"HTTP request headers"},{"location":"responses/","text":"Responses \u00b6 API responses \u00b6 iumiCash API returns HTTP status codes in response to calls. Some API calls also return JSON response bodies that include information about the resource including one or more contextual HATEOAS links. HATEOAS links can be used to request further information or submit calls to operate with data based on prebuilt links returned by API. HTTP status codes \u00b6 Successful requests \u00b6 For successful requests, iumiCash returns HTTP 2xx status codes. HTTP 2xx HTTP 2xx status code description Status code Description HTTP 200 OK The request succeeded. HTTP 201 Created A POST method successfully created a resource. HTTP 204 No Content The server successfully executed the method but returned no response body. Failed requests \u00b6 Failed requests return either HTTP 4xx status codes or HTTP 5xx status codes depending on the cause of the failure. Response error string Error code. description string Human-readable error description. field_errors list of object List of errors. For failed requests that are returned by iumiCash API the returned HTTP status codes are in the range of 4xx. For authentication specific HTTP 4xx status codes, see Authorization errors . HTTP 4xx HTTP 4xx status code description Status code Error code Description HTTP 400 Bad Request USER_PAYMENT_LIMIT The user applied amount limits that do not allow to process this request. HTTP 400 Bad Request USER_NOT_ACTIVE The user is no longer active in iumiCash. HTTP 400 Bad Request ACCOUNT_BALANCE_IS_LOW The user does not have sufficient iumiCash balance to fulfill this transaction. HTTP 400 Bad Request DISABLED_BY_USER The user restricted the vendor to process this request. HTTP 400 Bad Request INVALID_REQUEST The server could not understand the request. Can be one of this: The API cannot convert the payload data. The data is not in the expected data format. A required field is not available. HTTP 404 Not Found RESOURCE_NOT_FOUND The server did not find anything that matches the requested URI. Either the URI is incorrect, or the resource is not available. For example, no data exists in the database with that key. HTTP 405 Method Not Allowed METHOD_NOT_SUPPORTED The service or the resource does not support the requested HTTP method. HTTP 422 Unprocessable Entity UNPROCESSIBLE_ENTITY The API cannot complete the requested action due to business validation or other issues. For failed requests that are returned by the API server the returned HTTP status codes are in the range of 5xx. For example, such errors may occur when iumiCash API service is unreachable. HTTP 5xx HTTP 5xx status codes description Status code Error code Description HTTP 500 Internal Server Error Not applicable A system or an application error occurred. Although the client appears to have provided a correct request, something unexpected occurred on the server. HTTP 503 Service Unavailable Not applicable The server cannot handle the request due to temporary maintenance or outage. Authorization errors \u00b6 iumiCash API follows industry standard OAuth 2.0 authorization protocol and returns the HTTP 400 , HTTP 401 , HTTP 403 status codes for authorization errors. Most of them usually occur due to token-related issues and can be cleared by making sure that the token is present and hasn't expired. HTTP 4xx HTTP 4xx status code description Status code Error code Description HTTP 400 Bad Request INVALID_REQUEST Check request body and possible data in the specified resourse. For example: Incorrect response_type. Unsupported grant_type. Incorrect redirect_uris. HTTP 401 Unauthorized INVALID_AUTHZ Check authorization parameters for any errors. For example: Authorization header is not present. Invalid client credentials. Invalid refresh_token. Invalid authorization code. HTTP 403 Forbidden NOT_AUTHORIZED Authorization failed due to insufficient permissions. Make sure that you have access to the related resource. Validation errors \u00b6 For validation errors, iumiCash returns the HTTP 400 Bad Request status code. To prevent validation errors, ensure that parameters are the right type and conform to constraints. Examples \u00b6 Response Example error response. Danger Be careful! In the event of HTTP 5xx error status codes, iumiCash API will NOT return application/json content type header in the response. This may happen while iumiCash servers are unreachable or unresponsive. HTTP 5xx status codes are returned in text/plain response type by the server itself, e.g. apache , nginx , traefik . { \"error\": \"bad_request\", \"description\": \"Some reasonable error message\", \"field_errors\": [ { \"field\": \"field_name\", \"message\": \"field error message\" } ] } Objects \u00b6 field error \u00b6 Info field string Field containing the error. message string Validation message for this field.","title":"Responses"},{"location":"responses/#responses","text":"","title":"Responses"},{"location":"responses/#api-responses","text":"iumiCash API returns HTTP status codes in response to calls. Some API calls also return JSON response bodies that include information about the resource including one or more contextual HATEOAS links. HATEOAS links can be used to request further information or submit calls to operate with data based on prebuilt links returned by API.","title":"API responses"},{"location":"responses/#http-status-codes","text":"","title":"HTTP status codes"},{"location":"responses/#successful-requests","text":"For successful requests, iumiCash returns HTTP 2xx status codes. HTTP 2xx HTTP 2xx status code description Status code Description HTTP 200 OK The request succeeded. HTTP 201 Created A POST method successfully created a resource. HTTP 204 No Content The server successfully executed the method but returned no response body.","title":"Successful requests"},{"location":"responses/#failed-requests","text":"Failed requests return either HTTP 4xx status codes or HTTP 5xx status codes depending on the cause of the failure. Response error string Error code. description string Human-readable error description. field_errors list of object List of errors. For failed requests that are returned by iumiCash API the returned HTTP status codes are in the range of 4xx. For authentication specific HTTP 4xx status codes, see Authorization errors . HTTP 4xx HTTP 4xx status code description Status code Error code Description HTTP 400 Bad Request USER_PAYMENT_LIMIT The user applied amount limits that do not allow to process this request. HTTP 400 Bad Request USER_NOT_ACTIVE The user is no longer active in iumiCash. HTTP 400 Bad Request ACCOUNT_BALANCE_IS_LOW The user does not have sufficient iumiCash balance to fulfill this transaction. HTTP 400 Bad Request DISABLED_BY_USER The user restricted the vendor to process this request. HTTP 400 Bad Request INVALID_REQUEST The server could not understand the request. Can be one of this: The API cannot convert the payload data. The data is not in the expected data format. A required field is not available. HTTP 404 Not Found RESOURCE_NOT_FOUND The server did not find anything that matches the requested URI. Either the URI is incorrect, or the resource is not available. For example, no data exists in the database with that key. HTTP 405 Method Not Allowed METHOD_NOT_SUPPORTED The service or the resource does not support the requested HTTP method. HTTP 422 Unprocessable Entity UNPROCESSIBLE_ENTITY The API cannot complete the requested action due to business validation or other issues. For failed requests that are returned by the API server the returned HTTP status codes are in the range of 5xx. For example, such errors may occur when iumiCash API service is unreachable. HTTP 5xx HTTP 5xx status codes description Status code Error code Description HTTP 500 Internal Server Error Not applicable A system or an application error occurred. Although the client appears to have provided a correct request, something unexpected occurred on the server. HTTP 503 Service Unavailable Not applicable The server cannot handle the request due to temporary maintenance or outage.","title":"Failed requests"},{"location":"responses/#authorization-errors","text":"iumiCash API follows industry standard OAuth 2.0 authorization protocol and returns the HTTP 400 , HTTP 401 , HTTP 403 status codes for authorization errors. Most of them usually occur due to token-related issues and can be cleared by making sure that the token is present and hasn't expired. HTTP 4xx HTTP 4xx status code description Status code Error code Description HTTP 400 Bad Request INVALID_REQUEST Check request body and possible data in the specified resourse. For example: Incorrect response_type. Unsupported grant_type. Incorrect redirect_uris. HTTP 401 Unauthorized INVALID_AUTHZ Check authorization parameters for any errors. For example: Authorization header is not present. Invalid client credentials. Invalid refresh_token. Invalid authorization code. HTTP 403 Forbidden NOT_AUTHORIZED Authorization failed due to insufficient permissions. Make sure that you have access to the related resource.","title":"Authorization errors"},{"location":"responses/#validation-errors","text":"For validation errors, iumiCash returns the HTTP 400 Bad Request status code. To prevent validation errors, ensure that parameters are the right type and conform to constraints.","title":"Validation errors"},{"location":"responses/#examples","text":"Response Example error response. Danger Be careful! In the event of HTTP 5xx error status codes, iumiCash API will NOT return application/json content type header in the response. This may happen while iumiCash servers are unreachable or unresponsive. HTTP 5xx status codes are returned in text/plain response type by the server itself, e.g. apache , nginx , traefik . { \"error\": \"bad_request\", \"description\": \"Some reasonable error message\", \"field_errors\": [ { \"field\": \"field_name\", \"message\": \"field error message\" } ] }","title":"Examples"},{"location":"responses/#objects","text":"","title":"Objects"},{"location":"responses/#field-error","text":"Info field string Field containing the error. message string Validation message for this field.","title":"field error"},{"location":"types/","text":"Custom types \u00b6 iumiCash identifier \u00b6 Tip iumiCash identifier corresponds to the primary key of the related record in the database. For more information about the structure of iumiCash identifier, please refer to MongoDB ID .","title":"Custom types"},{"location":"types/#custom-types","text":"","title":"Custom types"},{"location":"types/#iumicash-identifier","text":"Tip iumiCash identifier corresponds to the primary key of the related record in the database. For more information about the structure of iumiCash identifier, please refer to MongoDB ID .","title":"iumiCash identifier"},{"location":"authentication/","text":"Introduction to authentication \u00b6 Authentication \u00b6 iumiCash REST API uses OAuth 2.0 access tokens to authenticate requests. The access token authorizes the use of the iumiCash REST API server(s). Prior to making calls via a REST API integration, an access token must be requested using client_id and client_secret . client_id and client_secret are created by iumiCash representatvies on request and shared in a secure format.","title":"Introduction to authentication"},{"location":"authentication/#introduction-to-authentication","text":"","title":"Introduction to authentication"},{"location":"authentication/#authentication","text":"iumiCash REST API uses OAuth 2.0 access tokens to authenticate requests. The access token authorizes the use of the iumiCash REST API server(s). Prior to making calls via a REST API integration, an access token must be requested using client_id and client_secret . client_id and client_secret are created by iumiCash representatvies on request and shared in a secure format.","title":"Authentication"},{"location":"authentication/authorize/","text":"Authorization code request \u00b6 Authorization code flow \u00b6 The first step of OAuth 2 is to get authorization from the user. iumiCash API accomplished this by redirecting user to an authorization page generated by iumiCash. First, a link is created to redirect the user in the format as follows: https://api.iumi.cash/api/v1/oauth/authorize/?response_type = code & client_id = CLIENT_ID & redirect_uri = REDIRECT_URI & scope = email & state = 1234zxc The user sees the authorization prompt (such as username and password), requested scopes (such as permissions as applicable) and the application (such as the one from the vendor) that requested access. Upon successful authentication of the user, the user will be redirected back to the vendor\u2019s redirect_uri with an authorization code returned in the URL in the following format: https://example.com/callback?code = AUTH_CODE & state = 1234zxc With the received code you can obtain access_token via token request procedure. GET /api/v1/oauth/authorize/ Query parameters \u00b6 Query parameters response_type enum Indicates that your server expects to receive an authorization code. Possible values: code client_id string Public identifier of the vendor\u2019s application. It can be obtained from a iumiCash representative. redirect_uri URL string Tells the authorization server where to redirect the user to after approving the request. scope string One or more space-separated strings indicating which permissions the application is requesting for. state string The application generates a random string, includes it in the request and expects it to be included in the responses. This is used to prevent CSRF attacks. Response \u00b6 Response code string The server returns the authorization code in the query string state string The application generates a random string, includes it in the request and expects it to be included in the responses. This is used to prevent CSRF attacks.","title":"Authorization code request"},{"location":"authentication/authorize/#authorization-code-request","text":"","title":"Authorization code request"},{"location":"authentication/authorize/#authorization-code-flow","text":"The first step of OAuth 2 is to get authorization from the user. iumiCash API accomplished this by redirecting user to an authorization page generated by iumiCash. First, a link is created to redirect the user in the format as follows: https://api.iumi.cash/api/v1/oauth/authorize/?response_type = code & client_id = CLIENT_ID & redirect_uri = REDIRECT_URI & scope = email & state = 1234zxc The user sees the authorization prompt (such as username and password), requested scopes (such as permissions as applicable) and the application (such as the one from the vendor) that requested access. Upon successful authentication of the user, the user will be redirected back to the vendor\u2019s redirect_uri with an authorization code returned in the URL in the following format: https://example.com/callback?code = AUTH_CODE & state = 1234zxc With the received code you can obtain access_token via token request procedure. GET /api/v1/oauth/authorize/","title":"Authorization code flow"},{"location":"authentication/authorize/#query-parameters","text":"Query parameters response_type enum Indicates that your server expects to receive an authorization code. Possible values: code client_id string Public identifier of the vendor\u2019s application. It can be obtained from a iumiCash representative. redirect_uri URL string Tells the authorization server where to redirect the user to after approving the request. scope string One or more space-separated strings indicating which permissions the application is requesting for. state string The application generates a random string, includes it in the request and expects it to be included in the responses. This is used to prevent CSRF attacks.","title":"Query parameters"},{"location":"authentication/authorize/#response","text":"Response code string The server returns the authorization code in the query string state string The application generates a random string, includes it in the request and expects it to be included in the responses. This is used to prevent CSRF attacks.","title":"Response"},{"location":"authentication/token/","text":"Generate access token \u00b6 Generate access token API \u00b6 POST /api/v1/oauth/token/ Headers \u00b6 Header parameters Authorization string required Separate your Base64-encoded client ID and client secret by a colon (:). Format: Basic {Your Base64-encoded client_id:client_secret} without curly braces. Example: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json . Request \u00b6 Request body grant_type enum required Specification by OAuth 2.0 protocol. iumiCash backend supports the following grant types: client_credentials authorization_code refresh_token redirect_uri URL string If the redirect URI was included in the initial authorization request, the service must require it in the token request as well. The redirect URI in the token request must be an exact match of the redirect URI that was used when generating the authorization code. The service must reject the request otherwise. code string Specification by OAuth 2.0 protocol. Info Required when grant_type is authorization_code . See code flow for details. refresh_token string Specification by OAuth 2.0 protocol. Info Required when grant_type is refresh_token . See refresh flow for details. state string Specification by OAuth 2.0 protocol. Info An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery Response \u00b6 Response scope string A list of space-separated permissions associated with the access token. access_token string Identifies the actual token used to call resources. token_type string Defines the type of token. It defaults to Bearer . expires_in integer Identifies the number of seconds until the access token expires. refresh_token string Identifies the actual token used to refresh the access token. refresh_token_expires_in integer Identifies the number of seconds until the refresh token expires. nonce string A one-time use random string generated from server-specific data, used to prevent replay attacks. Examples \u00b6 This section shows the difference between authorization and token obtaining flows. Client credentials \u00b6 This flow shows a call made by a vendor . For example, when working with order . Tip For API calls made by the end-user, see code article. Examples Request Response This example shows a request to obtain access token . Note This example shows client_credentials grant_type flow. See code or refresh for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"client_credentials\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" } Refresh token \u00b6 Use this flow when your access_token has expired. Refresh token A refresh token has infinite lifetime duration. Examples Request Response This example shows a request to refresh an access token. Note This example shows refresh_token grant_type flow. See client credentials or code for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"refresh_token\", \"refresh_token\": \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" } Authorization code \u00b6 This flow is used to access API calls by end-user . Tip To obtain authorization_code , see authorization code . Examples Request Response Note This example shows authorization_code grant_type flow. See client credentials or refresh for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"authorization_code\", \"redirect_uri\": \"https://starlink.com/callback\", \"code\": \"dsfhkj2389HJK93hjkf349hjsdf34rkjhd\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" }","title":"Generate access token"},{"location":"authentication/token/#generate-access-token","text":"","title":"Generate access token"},{"location":"authentication/token/#generate-access-token-api","text":"POST /api/v1/oauth/token/","title":"Generate access token API"},{"location":"authentication/token/#headers","text":"Header parameters Authorization string required Separate your Base64-encoded client ID and client secret by a colon (:). Format: Basic {Your Base64-encoded client_id:client_secret} without curly braces. Example: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json .","title":"Headers"},{"location":"authentication/token/#request","text":"Request body grant_type enum required Specification by OAuth 2.0 protocol. iumiCash backend supports the following grant types: client_credentials authorization_code refresh_token redirect_uri URL string If the redirect URI was included in the initial authorization request, the service must require it in the token request as well. The redirect URI in the token request must be an exact match of the redirect URI that was used when generating the authorization code. The service must reject the request otherwise. code string Specification by OAuth 2.0 protocol. Info Required when grant_type is authorization_code . See code flow for details. refresh_token string Specification by OAuth 2.0 protocol. Info Required when grant_type is refresh_token . See refresh flow for details. state string Specification by OAuth 2.0 protocol. Info An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client. The parameter SHOULD be used for preventing cross-site request forgery","title":"Request"},{"location":"authentication/token/#response","text":"Response scope string A list of space-separated permissions associated with the access token. access_token string Identifies the actual token used to call resources. token_type string Defines the type of token. It defaults to Bearer . expires_in integer Identifies the number of seconds until the access token expires. refresh_token string Identifies the actual token used to refresh the access token. refresh_token_expires_in integer Identifies the number of seconds until the refresh token expires. nonce string A one-time use random string generated from server-specific data, used to prevent replay attacks.","title":"Response"},{"location":"authentication/token/#examples","text":"This section shows the difference between authorization and token obtaining flows.","title":"Examples"},{"location":"authentication/token/#client-credentials","text":"This flow shows a call made by a vendor . For example, when working with order . Tip For API calls made by the end-user, see code article. Examples Request Response This example shows a request to obtain access token . Note This example shows client_credentials grant_type flow. See code or refresh for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"client_credentials\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" }","title":"Client credentials"},{"location":"authentication/token/#refresh-token","text":"Use this flow when your access_token has expired. Refresh token A refresh token has infinite lifetime duration. Examples Request Response This example shows a request to refresh an access token. Note This example shows refresh_token grant_type flow. See client credentials or code for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"refresh_token\", \"refresh_token\": \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" }","title":"Refresh token"},{"location":"authentication/token/#authorization-code","text":"This flow is used to access API calls by end-user . Tip To obtain authorization_code , see authorization code . Examples Request Response Note This example shows authorization_code grant_type flow. See client credentials or refresh for other flows. Tip If you are using curl for making requests, you can pass your client_id and client_secret by format -u \"<CLIENT_ID>:<CLIENT_SECRET>\" It is the same for passing Authorization header explicitly: -H \"Authorization: Basic e3tjbGllbnRfaWR9fTp7e2NsaWVudF9zZWNyZXR9fQ== curl -v -X POST \"https://api.iumi.cash/api/v1/oauth/token\" \\ -u \"<CLIENT_ID>:<CLIENT_SECRET>\" \\ -H \"Content-Type: application/json\" \\ -d ' \\ { \"grant_type\": \"authorization_code\", \"redirect_uri\": \"https://starlink.com/callback\", \"code\": \"dsfhkj2389HJK93hjkf349hjsdf34rkjhd\" } ' A successful request returns the HTTP 200 OK status code and a JSON response body. { \"scope\" : \"profile email https://api.iumi.cash/api/v1/recurrent\" , \"access_token\" : \"A21AAInqMcMvhHyuYQ0xIMSNbl4BIEwkvJ93HukaWZ7o3akLHD-5U9bFC2enYoVKzClY8kGl13TCyKAO25DKYEB1bPR3bRrXg\" , \"token_type\" : \"Bearer\" , \"expires_in\" : 28800 , \"refresh_token\" : \"eRtAQTVyGJedojtUbkMoHWWOdMMl5ujCDk_94gAA21AAInqMcMvhHyuYQ0-5U9bFenYoVKzClY8kGl13WWOdMMl5ujCDk_94gA\" , \"refresh_token_expires_in\" : 86400 , \"nonce\" : \"2022-04-06T20:10:53ZtyLRwCnLB3eGapVvhCVLScK8IUTqwqz2yUmMEOQbTEg\" }","title":"Authorization code"},{"location":"diagrams/onetime/","text":"One-time payment flow \u00b6 The following sequence diagram shows how one-time payment works. Diagram sequenceDiagram autonumber actor Client participant Vendor participant Auth participant iumiCash Client->Vendor: Click *Pay via iumiCash* alt Vendor has no `access_token` and `refresh_token` Vendor->Auth: Authorization Code request to /oauth/authorize/ Auth->Client: Redirect to login/approve Client->Auth: Authenticate and approve Auth->Vendor: Redirect to `redirect_uri` Vendor->Auth: Obtain `access_token` from /oauth/token/ Auth->Auth: Validate Auth-->Vendor: Return client's `access_token` and `refresh_token` end Vendor->iumiCash: Create `order` iumiCash-->Vendor: Return created order The following sequence diagram shows how one-time payment works. Steps description Click Pay via iumiCash The end-user clicks button Pay via iumiCash (or similar) in the vendor's user interface. Authorization Code request is sent to /oauth/authorize/ The vendor constructs URL to obtain user's credentials. See authorize request for detailed request. Redirect user to authorization page The iumiCash redirects user to an authorization page where the list of permissions and the application details are displayed. Tip This page also shows the vendor's verification status . Authenticate By logging in the user approves the vendor to use his iumiCash account for payments. Redirect to redirect_uri iumiCash API redirects the user to redirect_uri specified by the vendor at step 2. The redirect URL will include AUTH_CODE in query parameters. See authorization code for more information. Obtain access_token from /oauth/token/ The vendor makes a request to /oauth/token/ with the AUTH_CODE obtained in the previous step. See token request for more information. Validate iumiCash API validates the request. Return the API client access_token and refresh_token iumiCash API server returns a pair of access_token and refresh_token to the API client. See access token or refresh token for more information Create order The vendor constructs order data and submits create order request. Return created order The iumiCash API returns the details of the created order .","title":"One-time payment"},{"location":"diagrams/onetime/#one-time-payment-flow","text":"The following sequence diagram shows how one-time payment works. Diagram sequenceDiagram autonumber actor Client participant Vendor participant Auth participant iumiCash Client->Vendor: Click *Pay via iumiCash* alt Vendor has no `access_token` and `refresh_token` Vendor->Auth: Authorization Code request to /oauth/authorize/ Auth->Client: Redirect to login/approve Client->Auth: Authenticate and approve Auth->Vendor: Redirect to `redirect_uri` Vendor->Auth: Obtain `access_token` from /oauth/token/ Auth->Auth: Validate Auth-->Vendor: Return client's `access_token` and `refresh_token` end Vendor->iumiCash: Create `order` iumiCash-->Vendor: Return created order The following sequence diagram shows how one-time payment works. Steps description Click Pay via iumiCash The end-user clicks button Pay via iumiCash (or similar) in the vendor's user interface. Authorization Code request is sent to /oauth/authorize/ The vendor constructs URL to obtain user's credentials. See authorize request for detailed request. Redirect user to authorization page The iumiCash redirects user to an authorization page where the list of permissions and the application details are displayed. Tip This page also shows the vendor's verification status . Authenticate By logging in the user approves the vendor to use his iumiCash account for payments. Redirect to redirect_uri iumiCash API redirects the user to redirect_uri specified by the vendor at step 2. The redirect URL will include AUTH_CODE in query parameters. See authorization code for more information. Obtain access_token from /oauth/token/ The vendor makes a request to /oauth/token/ with the AUTH_CODE obtained in the previous step. See token request for more information. Validate iumiCash API validates the request. Return the API client access_token and refresh_token iumiCash API server returns a pair of access_token and refresh_token to the API client. See access token or refresh token for more information Create order The vendor constructs order data and submits create order request. Return created order The iumiCash API returns the details of the created order .","title":"One-time payment flow"},{"location":"orders/","text":"Orders \u00b6 An order represents a payment transaction between an end-user and a vendor. Use Orders API to create and retrieve orders.","title":"Orders"},{"location":"orders/#orders","text":"An order represents a payment transaction between an end-user and a vendor. Use Orders API to create and retrieve orders.","title":"Orders"},{"location":"orders/callback/","text":"Order callback mechanism \u00b6 Why you need to configure callback? \u00b6 When user completed/cancelled order flow, your backend needs to be notified about flow result. So the iumiCash will send POST request to your callback_url with details. Callback data \u00b6 Order information that the iumiCash will send to the vendor's callback_url . Callback data will contain order object , so you can check order status in iumiCash. This endpoint should return 200 OK with content OK . Otherwise, the iumiCash will make retry requests (see retry policy ) until the vendor returns successful response, or the vendor consumed order data by yourself. Note It required to make sure that the vendor processed order data. Callback request \u00b6 The iumiCash backend will send POST request to callback_url with iumicash-signature header. POST callback_url Request headers \u00b6 Header parameters iumicash-signature string iumiCash will sign order data with client_secret , so your backend can verify, that request was made by us. Tip See iumicash-signature for more information about signing. Content-Type string The media type. Required for operations with a request body. The value is application/<format> , where format is json . Request \u00b6 In request the iumiCash send Order data . See more information in example below. Response \u00b6 Info This endpoint should return 200 OK with content OK . Otherwise, the iumiCash will make retry requests (see retry policy ) while the vendor returns successfull response. It is required to make sure that the vendor processes order data. Example \u00b6 Examples Request Response Example request with cURL that the iumiCash backend will send to your callback_url . curl -v -X POST https://starlink.com/api/v1/iumiCash/callback/ \\ -H \"Content-Type: application/json\" \\ -H \"iumicash-signature: <some-calculated-order-specific-signature>\" \\ -d ' \\ { \"id\": \"542c2b97bac0595474108b48\", \"external_id\": \"123456\", \"created_at\": \"2022-09-12T13:27:09.860466\", \"updated_at\": \"2022-09-12T13:27:09.860466\", \"status\": \"created\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ], \"application_context\": { \"callback_url\": \"https://starlink.com/api/v1/iumiCash/callback/\" \"success_url\": \"https://starlink.com/success.html\", \"error_url\": \"https://starlink.com/error.html\" }, \"links\": [ { \"link\": \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\", \"rel\": \"self\", \"method\": \"get\" } ] } ' A successful request have to return the HTTP 200 OK status code and OK content. def post ( request : Request ) -> Response : iumicash_signature = request . headers . get ( \"iumicash-signature\" ) order_data = request . data ... some business logic and validation ... return Response ( data = \"OK\" , status_code = status . HTTP_200_OK ) iumiCash Signature \u00b6 iumiCash will sign order data with client_secret . In callback endpoint you can sign received order data with your client_secret and verify that this request was made by original iumiCash. To verify request, simply compare the next values: iumicash-signature from request headers. your result after signing order data with client_secret Algorithm The sign algorithm is HMAC-SHA256 , where data is request's body, secret cryptographic key is vendor's client_secret Signature comparing import os import hashlib import hmac client_secret = os . environ . get ( \"CLIENT_SECRET\" ) data = response . content signature = response . headers [ 'iumicash-signature' ] signature_computed = hmac . new ( key = client_secret . encode ( 'utf-8' ), msg = data . encode ( 'utf-8' ), digestmod = hashlib . sha256 ) . hexdigest () if not hmac . compare_digest ( signature , signature_computed ): print ( \"Signature not valid! Request was malicious!\" ) Security note If they equals, then request was made by original iumiCash. If not, request was compromised by others, and you should reject this request. Retry policy \u00b6 The iumiCash uses Exponential backoff algorithm to notify your callback url . An exponential backoff algorithm retries requests exponentially, increasing the waiting time between retries up to a maximum backoff time. For example: Make a callback request. If the request fails, wait 1 + random_number_milliseconds seconds and retry the request. If the request fails, wait 2 + random_number_milliseconds seconds and retry the request. If the request fails, wait 4 + random_number_milliseconds seconds and retry the request. And so on, up to a maximum_backoff time. Continue waiting and retrying up to some maximum number of retries, but do not increase the wait period between retries. where: wait time \\[ min(((2^n)+random\\_number\\_milliseconds), maximum\\_backoff) \\] with n incremented by 1 for each iteration (request). random_number_milliseconds is a random number of milliseconds less than or equal to 1000. This helps to avoid cases in which many clients are synchronized by some situation and all retry at once, sending requests in synchronized waves. The value of random_number_milliseconds is recalculated after each retry request. maximum_backoff is typically \\(2^{22}\\) seconds (~1.6 months). The appropriate value depends on the use case.","title":"Order callback mechanism"},{"location":"orders/callback/#order-callback-mechanism","text":"","title":"Order callback mechanism"},{"location":"orders/callback/#why-you-need-to-configure-callback","text":"When user completed/cancelled order flow, your backend needs to be notified about flow result. So the iumiCash will send POST request to your callback_url with details.","title":"Why you need to configure callback?"},{"location":"orders/callback/#callback-data","text":"Order information that the iumiCash will send to the vendor's callback_url . Callback data will contain order object , so you can check order status in iumiCash. This endpoint should return 200 OK with content OK . Otherwise, the iumiCash will make retry requests (see retry policy ) until the vendor returns successful response, or the vendor consumed order data by yourself. Note It required to make sure that the vendor processed order data.","title":"Callback data"},{"location":"orders/callback/#callback-request","text":"The iumiCash backend will send POST request to callback_url with iumicash-signature header. POST callback_url","title":"Callback request"},{"location":"orders/callback/#request-headers","text":"Header parameters iumicash-signature string iumiCash will sign order data with client_secret , so your backend can verify, that request was made by us. Tip See iumicash-signature for more information about signing. Content-Type string The media type. Required for operations with a request body. The value is application/<format> , where format is json .","title":"Request headers"},{"location":"orders/callback/#request","text":"In request the iumiCash send Order data . See more information in example below.","title":"Request"},{"location":"orders/callback/#response","text":"Info This endpoint should return 200 OK with content OK . Otherwise, the iumiCash will make retry requests (see retry policy ) while the vendor returns successfull response. It is required to make sure that the vendor processes order data.","title":"Response"},{"location":"orders/callback/#example","text":"Examples Request Response Example request with cURL that the iumiCash backend will send to your callback_url . curl -v -X POST https://starlink.com/api/v1/iumiCash/callback/ \\ -H \"Content-Type: application/json\" \\ -H \"iumicash-signature: <some-calculated-order-specific-signature>\" \\ -d ' \\ { \"id\": \"542c2b97bac0595474108b48\", \"external_id\": \"123456\", \"created_at\": \"2022-09-12T13:27:09.860466\", \"updated_at\": \"2022-09-12T13:27:09.860466\", \"status\": \"created\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ], \"application_context\": { \"callback_url\": \"https://starlink.com/api/v1/iumiCash/callback/\" \"success_url\": \"https://starlink.com/success.html\", \"error_url\": \"https://starlink.com/error.html\" }, \"links\": [ { \"link\": \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\", \"rel\": \"self\", \"method\": \"get\" } ] } ' A successful request have to return the HTTP 200 OK status code and OK content. def post ( request : Request ) -> Response : iumicash_signature = request . headers . get ( \"iumicash-signature\" ) order_data = request . data ... some business logic and validation ... return Response ( data = \"OK\" , status_code = status . HTTP_200_OK )","title":"Example"},{"location":"orders/callback/#iumicash-signature","text":"iumiCash will sign order data with client_secret . In callback endpoint you can sign received order data with your client_secret and verify that this request was made by original iumiCash. To verify request, simply compare the next values: iumicash-signature from request headers. your result after signing order data with client_secret Algorithm The sign algorithm is HMAC-SHA256 , where data is request's body, secret cryptographic key is vendor's client_secret Signature comparing import os import hashlib import hmac client_secret = os . environ . get ( \"CLIENT_SECRET\" ) data = response . content signature = response . headers [ 'iumicash-signature' ] signature_computed = hmac . new ( key = client_secret . encode ( 'utf-8' ), msg = data . encode ( 'utf-8' ), digestmod = hashlib . sha256 ) . hexdigest () if not hmac . compare_digest ( signature , signature_computed ): print ( \"Signature not valid! Request was malicious!\" ) Security note If they equals, then request was made by original iumiCash. If not, request was compromised by others, and you should reject this request.","title":"iumiCash Signature"},{"location":"orders/callback/#retry-policy","text":"The iumiCash uses Exponential backoff algorithm to notify your callback url . An exponential backoff algorithm retries requests exponentially, increasing the waiting time between retries up to a maximum backoff time. For example: Make a callback request. If the request fails, wait 1 + random_number_milliseconds seconds and retry the request. If the request fails, wait 2 + random_number_milliseconds seconds and retry the request. If the request fails, wait 4 + random_number_milliseconds seconds and retry the request. And so on, up to a maximum_backoff time. Continue waiting and retrying up to some maximum number of retries, but do not increase the wait period between retries. where: wait time \\[ min(((2^n)+random\\_number\\_milliseconds), maximum\\_backoff) \\] with n incremented by 1 for each iteration (request). random_number_milliseconds is a random number of milliseconds less than or equal to 1000. This helps to avoid cases in which many clients are synchronized by some situation and all retry at once, sending requests in synchronized waves. The value of random_number_milliseconds is recalculated after each retry request. maximum_backoff is typically \\(2^{22}\\) seconds (~1.6 months). The appropriate value depends on the use case.","title":"Retry policy"},{"location":"orders/create_order/","text":"Create order \u00b6 Create order API \u00b6 Orders are created using a combination of an HTTP method and an end-point as follows: POST /api/v1/orders/ Headers \u00b6 Header parameters Authorization string required The identifier (such as a bearer token) is required to validate the third-party system to access the resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token. Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json . RequestId string The idempotency key is used to correlate request payloads with response payloads. See idempotency for more information. Request \u00b6 Request body external_id string required This is a unique identifier for the vendor\u2019s system. iumiCash saves this identifier as part of the order record. Orders can be cross-checked between iumiCash and the vendors system using this identifier. items list of item object required Items included in the order. Response \u00b6 Response id [ID][identifier] unique Unique identifier of the order as per iumiCash system. external_id string unique Unique identifier of the order as per the vendor\u2019s system. created_at datetime Date and time of the order creation in ISO format. updated_at datetime Date and time of the order last update in ISO format. status enum The order status can be one of the following: created approved captured cancelled completed items list of item object Items included in the order. links list of HATEOAS links An array of HATEOAS links related to this order processing (for example, to get the latest status of the order). Tip If the vendor failed to get the order details upon creation, then the vendor can submit a request via iumiCash API separately to get the details of the order. Examples \u00b6 Examples Request Response An example request using cURL. curl -v -X POST https://api.iumi.cash/api/v1/orders/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" \\ -H \"RequestId: 7b92603e-77ed-4896-8e78-5dea2050476a\" \\ -d ' \\ { \"external_id\": \"123456\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ] } ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] } Objects \u00b6 Request and response objects item \u00b6 Description name string Name of the order. description string Description of the order. amount object Amount object. count integer Number of the specific item in the order. amount \u00b6 Description value Decimal Price of one item in the order. currency_code enum . See available currencies . Currency of the item price. HATEOAS \u00b6 Description link URL string The complete target URL used to make the related call. rel enum The link relation type. Possible values are: self approve capture cancel method enum The HTTP method required to make the related call. Possible values are: GET POST Currencies \u00b6 Description Currency values may be restricted for a particular vendor. Possible values are: NZD SBD USD","title":"Create order"},{"location":"orders/create_order/#create-order","text":"","title":"Create order"},{"location":"orders/create_order/#create-order-api","text":"Orders are created using a combination of an HTTP method and an end-point as follows: POST /api/v1/orders/","title":"Create order API"},{"location":"orders/create_order/#headers","text":"Header parameters Authorization string required The identifier (such as a bearer token) is required to validate the third-party system to access the resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token. Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json . RequestId string The idempotency key is used to correlate request payloads with response payloads. See idempotency for more information.","title":"Headers"},{"location":"orders/create_order/#request","text":"Request body external_id string required This is a unique identifier for the vendor\u2019s system. iumiCash saves this identifier as part of the order record. Orders can be cross-checked between iumiCash and the vendors system using this identifier. items list of item object required Items included in the order.","title":"Request"},{"location":"orders/create_order/#response","text":"Response id [ID][identifier] unique Unique identifier of the order as per iumiCash system. external_id string unique Unique identifier of the order as per the vendor\u2019s system. created_at datetime Date and time of the order creation in ISO format. updated_at datetime Date and time of the order last update in ISO format. status enum The order status can be one of the following: created approved captured cancelled completed items list of item object Items included in the order. links list of HATEOAS links An array of HATEOAS links related to this order processing (for example, to get the latest status of the order). Tip If the vendor failed to get the order details upon creation, then the vendor can submit a request via iumiCash API separately to get the details of the order.","title":"Response"},{"location":"orders/create_order/#examples","text":"Examples Request Response An example request using cURL. curl -v -X POST https://api.iumi.cash/api/v1/orders/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" \\ -H \"RequestId: 7b92603e-77ed-4896-8e78-5dea2050476a\" \\ -d ' \\ { \"external_id\": \"123456\", \"items\": [ { \"name\": \"T-shirt\", \"description\": \"Brand new T-shirt\", \"amount\": { \"value\": 100, \"currency_code\": \"USD\" }, \"count\": 1 } ] } ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] }","title":"Examples"},{"location":"orders/create_order/#objects","text":"Request and response objects","title":"Objects"},{"location":"orders/create_order/#item","text":"Description name string Name of the order. description string Description of the order. amount object Amount object. count integer Number of the specific item in the order.","title":"item"},{"location":"orders/create_order/#amount","text":"Description value Decimal Price of one item in the order. currency_code enum . See available currencies . Currency of the item price.","title":"amount"},{"location":"orders/create_order/#hateoas","text":"Description link URL string The complete target URL used to make the related call. rel enum The link relation type. Possible values are: self approve capture cancel method enum The HTTP method required to make the related call. Possible values are: GET POST","title":"HATEOAS"},{"location":"orders/create_order/#currencies","text":"Description Currency values may be restricted for a particular vendor. Possible values are: NZD SBD USD","title":"Currencies"},{"location":"orders/get/","text":"Get order \u00b6 Get order API \u00b6 Orders are retrieved using a combination of an HTTP method and an end-point as follows: POST /api/v1/orders/<order_id>/ Path parameters \u00b6 Path parameters order_id ID Unique identifier of the order as per iumiCash system. Headers \u00b6 Header parameters Authorization string required The identifier (such as a bearer token) is required to validate the third-party system to access the resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token. Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json . Response \u00b6 Response id ID unique Unique identifier of the order as per iumiCash system. external_id string unique Unique identifier of the order as per the vendor\u2019s system. created_at datetime Date and time of the order initial creation in ISO format. updated_at datetime Date and time of the order last update in ISO format. status enum The order status can be one of the following: created approved cancelled completed items list of item object Items included in the order. links list of HATEOAS links An array of HATEOAS links related to this order processing (such as to get the latest status of the order, etc.). Examples \u00b6 Examples Request Response An example request using cURL. curl -v -X POST https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] }","title":"Get order"},{"location":"orders/get/#get-order","text":"","title":"Get order"},{"location":"orders/get/#get-order-api","text":"Orders are retrieved using a combination of an HTTP method and an end-point as follows: POST /api/v1/orders/<order_id>/","title":"Get order API"},{"location":"orders/get/#path-parameters","text":"Path parameters order_id ID Unique identifier of the order as per iumiCash system.","title":"Path parameters"},{"location":"orders/get/#headers","text":"Header parameters Authorization string required The identifier (such as a bearer token) is required to validate the third-party system to access the resource. To make REST API calls, include the bearer token in this header with the Bearer authentication scheme. The value is Bearer <Access-Token> . To get access token see access token. Content-Type string required The media type is required for operations with a request body. The value is application/<format> , where format is json .","title":"Headers"},{"location":"orders/get/#response","text":"Response id ID unique Unique identifier of the order as per iumiCash system. external_id string unique Unique identifier of the order as per the vendor\u2019s system. created_at datetime Date and time of the order initial creation in ISO format. updated_at datetime Date and time of the order last update in ISO format. status enum The order status can be one of the following: created approved cancelled completed items list of item object Items included in the order. links list of HATEOAS links An array of HATEOAS links related to this order processing (such as to get the latest status of the order, etc.).","title":"Response"},{"location":"orders/get/#examples","text":"Examples Request Response An example request using cURL. curl -v -X POST https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/ \\ -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" ' A successful request returns the HTTP 201 Created status code and a JSON response body. { \"id\" : \"542c2b97bac0595474108b48\" , \"external_id\" : \"123456\" , \"created_at\" : \"2022-09-12T13:27:09.860466\" , \"updated_at\" : \"2022-09-12T13:27:09.860466\" , \"status\" : \"created\" , \"items\" : [ { \"name\" : \"T-shirt\" , \"description\" : \"Brand new T-shirt\" , \"amount\" : { \"value\" : 100 , \"currency_code\" : \"USD\" } , \"count\" : 1 } ] , \"links\" : [ { \"link\" : \"https://api.iumi.cash/api/v1/orders/542c2b97bac0595474108b48/\" , \"rel\" : \"self\" , \"method\" : \"get\" } ] }","title":"Examples"},{"location":"orders/recurrent_payment/","text":"Recurrent payments \u00b6 Recurrent payments are triggered by the vendor\u2019s system and are processed by iumiCash the same way the one-time payments are executed. The responsibility for initiating recurrent payment requests at the right time for the correct items (services, products, etc.) and amounts lies on the vendor\u2019s side. See One-Time Payment for more details about order creation.","title":"Recurrent payments"},{"location":"orders/recurrent_payment/#recurrent-payments","text":"Recurrent payments are triggered by the vendor\u2019s system and are processed by iumiCash the same way the one-time payments are executed. The responsibility for initiating recurrent payment requests at the right time for the correct items (services, products, etc.) and amounts lies on the vendor\u2019s side. See One-Time Payment for more details about order creation.","title":"Recurrent payments"},{"location":"vendors/","text":"Introduction to vendors \u00b6 A Vendor is a third-party system integrated with iumiCash for the purpose of using iumiCash as one of the payment methods offered to the end-users. The following are the major steps required to integrate with iumiCash and start using iumiCash as a payment method: Apply to a iumiCash representative to get registered as a vendor. Obtain client_id , client_secret credentials and API URL's from iumiCash. Get whitelisted by iumiCash to access its sandbox API instance. Test integration by exchanging data and queries with iumiCash sandbox instance. (Optional) Request iumiCash to apply Verified status to the vendor\u2019s account. Get whitelisted by iumiCash to access its production API instance. Start creating orders as per the flow diagram. See One-time payment for more information.","title":"Introduction to vendors"},{"location":"vendors/#introduction-to-vendors","text":"A Vendor is a third-party system integrated with iumiCash for the purpose of using iumiCash as one of the payment methods offered to the end-users. The following are the major steps required to integrate with iumiCash and start using iumiCash as a payment method: Apply to a iumiCash representative to get registered as a vendor. Obtain client_id , client_secret credentials and API URL's from iumiCash. Get whitelisted by iumiCash to access its sandbox API instance. Test integration by exchanging data and queries with iumiCash sandbox instance. (Optional) Request iumiCash to apply Verified status to the vendor\u2019s account. Get whitelisted by iumiCash to access its production API instance. Start creating orders as per the flow diagram. See One-time payment for more information.","title":"Introduction to vendors"},{"location":"vendors/vendor_registration/","text":"Vendor registration \u00b6 Registration \u00b6 To use the iumiCash REST API, the vendor must first register by applying to a iumiCash representative. After registration, the vendor will receive a pair of client_id and client_secret credentials as well as the API URL. Whitelisting \u00b6 For additional security, iumiCash may require vendors to provide the details of their systems (such as IP addresses, domain names, etc.), which will be added to iumiCash API whitelists. Security tip Be careful! Do not expose your client_secret and other confidential data related to iumiCash to others.","title":"Registration"},{"location":"vendors/vendor_registration/#vendor-registration","text":"","title":"Vendor registration"},{"location":"vendors/vendor_registration/#registration","text":"To use the iumiCash REST API, the vendor must first register by applying to a iumiCash representative. After registration, the vendor will receive a pair of client_id and client_secret credentials as well as the API URL.","title":"Registration"},{"location":"vendors/vendor_registration/#whitelisting","text":"For additional security, iumiCash may require vendors to provide the details of their systems (such as IP addresses, domain names, etc.), which will be added to iumiCash API whitelists. Security tip Be careful! Do not expose your client_secret and other confidential data related to iumiCash to others.","title":"Whitelisting"},{"location":"vendors/verification/","text":"Vendor verification \u00b6 Verification \u00b6 iumiCash follows manual procedures for verification of each vendor. iumiCash representatives may request additional information from the vendor to verify the account prior to registering the vendor in the system. This may include contact details, license, and other business-related information. How to check verification status? \u00b6 Vendors must contact iumiCash representatives to obtain the verification status.","title":"Verification"},{"location":"vendors/verification/#vendor-verification","text":"","title":"Vendor verification"},{"location":"vendors/verification/#verification","text":"iumiCash follows manual procedures for verification of each vendor. iumiCash representatives may request additional information from the vendor to verify the account prior to registering the vendor in the system. This may include contact details, license, and other business-related information.","title":"Verification"},{"location":"vendors/verification/#how-to-check-verification-status","text":"Vendors must contact iumiCash representatives to obtain the verification status.","title":"How to check verification status?"}]}